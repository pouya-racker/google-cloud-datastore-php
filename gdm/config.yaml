---
##Improting Templates###############################################################################
imports:
- path: const.py
  name: const.py
##Defining Resources###############################################################################
resources:
##Defining Constants
- type: const.py
  name: autocomplete-webapp-consts
  properties:
    network: &NETWORK projects/autocomplete-webapp-vpc/global/networks/webapp-net
    region1_subnet: &REGION1_SUBNET projects/autocomplete-webapp-vpc/regions/us-west1/subnetworks/us-west-subnet
    region2_subnet: &REGION2_SUBNET projects/autocomplete-webapp-vpc/regions/us-east1/subnetworks/us-east-subnet
    region1: &REGION1 us-west1
    region2: &REGION2 us-east1
    webapp_image: &WEBAPP_IMAGE projects/debian-cloud/global/images/debian-9-stretch-v20180501
##Creating WebApp Service Account
- type: iam.v1.serviceAccount
  name: webapp-sa
  properties:
    displayName: webapp-sa
    accountId: webapp-sa
# HTTP Health-Check
- type: compute.v1.healthCheck
  name: webapp-hc
  properties:
    type: 'HTTP'
    httpHealthCheck:
      port: 80
#Region1 WebApp################################################################################
##Creating WebApp Template in R1
- type: compute.v1.instanceTemplate
  name: webapp-it-r1
  properties:
    project: autocomplete-webapp-vpc
    properties:
      machineType: n1-standard-1
      networkInterfaces:
      - network: *NETWORK
        subnetwork: *REGION1_SUBNET
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      disks:
      - deviceName: boot
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: *WEBAPP_IMAGE
          diskSizeGb: 10
      tags:
        items:
        - webapp
      serviceAccounts:
        - email: $(ref.webapp-sa.email)
          scopes:
            - https://www.googleapis.com/auth/cloud-platform
      metadata:
        items:
        - key: startup-script
          value: |
            #! /bin/bash
            # Install SD Logging Agent
            curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh |bash
            # Install SD Monitoring Agent
            curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh |bash
            # Installing Apache
            apt-get update; apt-get install -y apache2; cd /var/www/html
            #Reading and exporting project_id and zone from metadata
            export PROJECT_ID=`curl -s "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google"`
            touch zone.html
            echo "<html>" > zone.html
            echo "<body>" >> zone.html
            echo "<h1>Zone: `curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" |cut -d'/' -f4`</h1>" >> zone.html
            echo "<h1>Instnace_Name: `curl -s "http://metadata.google.internal/computeMetadata/v1/instance/name" -H "Metadata-Flavor: Google" |cut -d'/' -f4`</h1>" >> zone.html
            echo "</body>" >> zone.html
            echo "</html>" >> zone.html
# Region1 IGM
- type: compute.v1.regionInstanceGroupManager
  name: webapp-igm-r1
  properties:
    region: *REGION1
    instanceTemplate: $(ref.webapp-it-r1.selfLink)
    targetSize: 1
    autoHealingPolicies:
     - healthCheck: $(ref.webapp-hc.selfLink)
#Instance Group AutoScaler R1
- type: compute.v1.regionAutoscaler
  name: webapp-as-r1
  properties:
    autoscalingPolicy:
      maxNumReplicas: 3
    target: $(ref.webapp-igm-r1.selfLink)
    region: *REGION1
#Region2 WebApp###############################################################################
##Creating WebApp Template in R2
- type: compute.v1.instanceTemplate
  name: webapp-it-r2
  properties:
    project: autocomplete-webapp-vpc
    properties:
      machineType: n1-standard-1
      networkInterfaces:
      - network: *NETWORK
        subnetwork: *REGION2_SUBNET
        accessConfigs:
        - name: External NAT
          type: ONE_TO_ONE_NAT
      disks:
      - deviceName: boot
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: *WEBAPP_IMAGE
          diskSizeGb: 10
      tags:
        items:
        - webapp
      serviceAccounts:
        - email: $(ref.webapp-sa.email)
          scopes:
            - https://www.googleapis.com/auth/cloud-platform
      metadata:
        items:
        - key: startup-script
          value: |
            #! /bin/bash
            # Install SD Logging Agent
            curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh |bash
            # Install SD Monitoring Agent
            curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh |
            # Installing Apache
            apt-get update; apt-get install -y apache2; cd /var/www/html
            #Reading and exporting project_id and zone from metadata
            export PROJECT_ID=`curl -s "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google"`
            touch zone.html
            echo "<html>" > zone.html
            echo "<body>" >> zone.html
            echo "<h1>Zone: `curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" |cut -d'/' -f4`</h1>" >> zone.html
            echo "<h1>Instnace_Name: `curl -s "http://metadata.google.internal/computeMetadata/v1/instance/name" -H "Metadata-Flavor: Google" |cut -d'/' -f4`</h1>" >> zone.html
            echo "</body>" >> zone.html
            echo "</html>" >> zone.html
# Region2 IGM
- type: compute.v1.regionInstanceGroupManager
  name: webapp-igm-r2
  properties:
    region: *REGION2
    instanceTemplate: $(ref.webapp-it-r2.selfLink)
    targetSize: 1
    autoHealingPolicies:
     - healthCheck: $(ref.webapp-hc.selfLink)
#Instance Group AutoScaler R2
- type: compute.v1.regionAutoscaler
  name: webapp-as-r2
  properties:
    autoscalingPolicy:
      maxNumReplicas: 3
    target: $(ref.webapp-igm-r2.selfLink)
    region: *REGION2
## FrontEnd External HTTPS Load-Balancer###############################################################################
# EXT-LB Global IP address
- type: compute.v1.globalAddress
  name: webapp-ip1-lb1
  properties:
    ipVersion: IPV4
# HTTP Health-Check
- type: compute.v1.healthCheck
  name: webapp-ext-hc
  properties:
    type: 'HTTP'
    httpHealthCheck:
      port: 80
# Backend Service
- type: compute.v1.backendService
  name: webapp-be
  properties:
    healthChecks:
      - $(ref.webapp-ext-hc.selfLink)
#    backends:
#      - group: $(ref.webapp-igm-r1.selfLink)
#      - group: $(ref.webapp-igm-r2.selfLink)
    loadBalancingScheme: 'EXTERNAL'
# URLMAP
- type: compute.v1.urlMap
  name: webapp-mapper
  properties:
    defaultService: $(ref.webapp-be.selfLink)
    hostRules:
      - hosts:
        - "*"
        pathMatcher: pathmatcher1
    pathMatchers:
      - name: 'pathmatcher1'
        defaultService: $(ref.webapp-be.selfLink)
        pathRules:
         - service: $(ref.webapp-be.selfLink)
           paths:
           - '/'
# HTTP Proxy
- type: compute.v1.targetHttpProxy
  name: http-proxy
  properties:
    urlMap: $(ref.webapp-mapper.selfLink)
# Global Forwarding Rule To Target HTTP Proxy
- type: compute.v1.globalForwardingRule
  name: webapp-ext-lb
  properties:
    portRange: 80
    IPProtocol: TCP
    IPAddress: $(ref.webapp-ip1-lb1.selfLink)
    target: $(ref.http-proxy.selfLink)
    loadBalancingScheme: 'EXTERNAL'
